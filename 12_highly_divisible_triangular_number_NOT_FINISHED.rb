# frozen_string_literal: true

# Highly divisible triangular number
# Problem 12
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#      1: 1
#      3: 1,3
#      6: 1,2,3,6
#     10: 1,2,5,10
#     15: 1,3,5,15
#     21: 1,3,7,21
#     28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

def divisers(number)
  (1..number).select { |diviser| number % diviser == 0 }
end

current_triangular_number = 0

(current_triangular_number..Float::INFINITY).each do |i|
  length = divisers(current_triangular_number).length
  break if length > 500
  if length > 100
    puts "Number: #{current_triangular_number}, Length: #{length}"
  end
  current_triangular_number += i
end

require 'pry'; binding.pry

puts answer
